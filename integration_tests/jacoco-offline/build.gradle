plugins {
    alias(libs.plugins.jacoco)
    alias(libs.plugins.robolectric.java.module)
}

def jacocoVersion = libs.versions.jacoco.get()

jacoco {
    toolVersion = jacocoVersion
}

configurations {
    jacocoAnt
    jacocoRuntime
}

dependencies {
    testCompileOnly AndroidSdk.MAX_SDK.coordinates
    testRuntimeOnly AndroidSdk.MAX_SDK.coordinates

    testImplementation project(":robolectric")
    testImplementation libs.junit4
    testImplementation "org.jacoco:org.jacoco.agent:$jacocoVersion:runtime"
}

def unitTestTaskName = "test"

def compileSourceTaskName = "classes"

def javaDir = layout.buildDirectory.dir("classes/java/main").get().asFile

def kotlinDir = layout.buildDirectory.dir("classes/kotlin/main").get().asFile

def jacocoInstrumentedClassesOutputDir = layout.buildDirectory.dir("$jacocoVersion/classes/java/classes-instrumented").get().asFile

// make sure it's evaluated after the AGP evaluation.
afterEvaluate {
    tasks.named(compileSourceTaskName).configure { task ->
        task.doLast {
            println "[JaCoCo]:Generating JaCoCo instrumented classes for the build."

            if (jacocoInstrumentedClassesOutputDir.exists()) {
                println "[JaCoCo]:Classes had been instrumented."
                return
            }

            ant.taskdef(name: 'instrument',
                    classname: 'org.jacoco.ant.InstrumentTask',
                    classpath: configurations.jacocoAnt.asPath)

            if (javaDir.exists()) {
                ant.instrument(destdir: jacocoInstrumentedClassesOutputDir.path) {
                    fileset(
                            dir: javaDir.path,
                            excludes: []
                    )
                }
            } else {
                println "Classes directory with path: $javaDir does not existed."
            }

            if (kotlinDir.exists()) {
                ant.instrument(destdir: jacocoInstrumentedClassesOutputDir.path) {
                    fileset(
                            dir: kotlinDir.path,
                            excludes: []
                    )
                }
            } else {
                println "Classes directory with path: $kotlinDir does not existed."
            }
        }
    }

    def executionDataFilePath = layout.buildDirectory.dir("jacoco").get().file("${unitTestTaskName}.exec").getAsFile().path

    // put JaCoCo instrumented classes and JaCoCoRuntime to the beginning of the JVM classpath.
    tasks.named(unitTestTaskName).configure { task ->
        task.doFirst {
            jacoco {
                // disable JaCoCo on-the-fly from Gradle JaCoCo plugin.
                enabled = false
            }

            println "[JaCoCo]:Modifying classpath of tests JVM."

            systemProperty 'jacoco-agent.destfile', executionDataFilePath

            classpath = files(jacocoInstrumentedClassesOutputDir.path) + classpath + configurations.jacocoRuntime

            println "Final test JVM classpath is ${classpath.getAsPath()}"
        }
    }
}
