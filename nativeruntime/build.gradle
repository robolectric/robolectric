import org.robolectric.gradle.DeployedRoboJavaModulePlugin
import org.robolectric.gradle.RoboJavaModulePlugin

apply plugin: RoboJavaModulePlugin
apply plugin: DeployedRoboJavaModulePlugin

static def osName() {
  def osName = System.getProperty("os.name").toLowerCase(Locale.US);
  if (osName.contains("linux")) {
    return "linux"
  } else if (osName.contains("mac")) {
    return "mac"
  } else if (osName.contains("win")) {
    return "windows"
  }
  return "unknown"
}

static def arch() {
  def arch = System.getProperty("os.arch").toLowerCase(Locale.US);
  if (arch.equals("x86_64") || arch.equals("amd64")) {
    return "x86_64"
  }
  return arch
}

task cmakeNativeRuntime {
  doLast {
    mkdir "$buildDir/cpp"
    exec {
      workingDir "$buildDir/cpp"
      commandLine 'cmake', "-B", ".", "-S","$projectDir/cpp/", "-G", "Ninja"
    }
  }
}

task configureICU {
  onlyIf { !System.getenv('ICU_ROOT_DIR') }
  doLast {
    def os = osName()
    if (!file("$projectDir/external/icu/icu4c/source").exists()) {
      throw new GradleException("ICU submodule not detected. Please run `git submodule update --init`")
    }
    if (file("$projectDir/external/icu/icu4c/source/Makefile").exists()) {
      println("ICU Makefile detected, skipping ICU configure")
    } else {
      exec {
        workingDir "$projectDir/external/icu/icu4c/source"
        if (os.contains("linux")) {
          environment "CFLAGS", "-fPIC"
          environment "CXXFLAGS", "-fPIC"
          commandLine './runConfigureICU', 'Linux', '--enable-static', '--disable-shared'
        } else if (os.contains("mac")) {
          commandLine './runConfigureICU', 'MacOSX', '--enable-static', '--disable-shared'
        } else {
          println("ICU configure not supported for OS '${System.getProperty("os.name")}'")
        }
      }
    }
  }
}

task buildICU {
  onlyIf { !System.getenv('ICU_ROOT_DIR') }
  dependsOn configureICU
  doLast {
    exec {
      def os = osName()
      if (os.contains("linux") || os.contains("mac")) {
        workingDir "$projectDir/external/icu/icu4c/source"
        commandLine 'make', '-j4'
      }
    }
  }
}

task makeNativeRuntime {
  dependsOn buildICU
  dependsOn cmakeNativeRuntime
  doLast {
    exec {
      workingDir "$buildDir/cpp"
      commandLine 'ninja'
    }
  }
}

processResources {
 def os = osName()
 if (System.getenv('SKIP_NATIVERUNTIME_BUILD')) {
   println("Skipping the nativeruntime build");
 } else if (!os.contains("linux") && !os.contains("mac")) {
   println("Building the nativeruntime not supported for OS '${System.getProperty("os.name")}'")
 } else {
   dependsOn makeNativeRuntime
   from ("$buildDir/cpp") {
     include '*libnativeruntime.*'
     rename { String fileName ->
       fileName.replace("libnativeruntime", "librobolectric-nativeruntime")
     }
     into "native/${os}/${arch()}/"
   }
 }
}

dependencies {
  api "com.google.guava:guava:27.0.1-jre"
  compileOnly AndroidSdk.MAX_SDK.coordinates
}
