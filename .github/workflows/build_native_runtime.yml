name: Build Native Runtime

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master, google ]

permissions:
  contents: read

jobs:
  build_native_runtime:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-latest, self-hosted, windows-2019 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # msys2 only log not fail on non-Windows platform.
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          platform-check-severity: warn
          location: D:\
          install: >-
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Install build tools (Mac OS)
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install ninja-build

      - name: Cache ICU build output (Non Windows)
        id: cache-icu
        uses: actions/cache@v3
        if: runner.os == 'Linux' || runner.os == 'macOS'
        with:
          path: ~/icu-bin
          key: ${{ runner.os }}-${{ runner.arch }}-icu-${{ hashFiles('nativeruntime/external/icu/**') }}

      - name: Cache ICU build output (Windows)
        id: cache-icu-windows
        uses: actions/cache@v3
        if: runner.os == 'Windows'
        with:
          path: D:\msys64\home\runneradmin\icu-bin
          key: ${{ runner.os }}-${{ runner.arch }}-icu-windows-${{ hashFiles('nativeruntime/external/icu/**') }}

      - name: Build ICU for MacOS
        if: runner.os =='macOS' && steps.cache-icu.outputs.cache-hit != 'true'
        run: |
          cd nativeruntime/external/icu/icu4c/source
          ./runConfigureICU MacOSX --enable-static --prefix=$HOME/icu-bin
          make -j4
          make install

      - name: Build ICU for Linux
        if: runner.os == 'Linux' && steps.cache-icu.outputs.cache-hit != 'true'
        run: |
          export CFLAGS="$CFLAGS -fPIC"
          export CXXFLAGS="$CXXFLAGS -fPIC"
          cd nativeruntime/external/icu/icu4c/source
          ./runConfigureICU Linux --enable-static --prefix=$HOME/icu-bin
          make -j4
          make install

      - name: Build ICU for Windows
        if: runner.os == 'Windows' && steps.cache-icu-windows.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cd nativeruntime/external/icu/icu4c/source
          ./runConfigureICU MinGW --enable-static --prefix=$HOME/icu-bin
          make -j4
          make install

      - name: Run CMake (Non Windows)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mkdir build
          cd build
          ICU_ROOT_DIR=$HOME/icu-bin cmake -B . -S ../nativeruntime/cpp -G Ninja
          ninja

      - name: Run CMake (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          ICU_ROOT_DIR=$HOME/icu-bin cmake -B . -S ../nativeruntime/cpp -G Ninja
          ninja

      - name: Rename libnativeruntime for Linux
        if: runner.os == 'Linux'
        run: |
          echo "NATIVERUNTIME_ARTIFACT_FILE=librobolectric-nativeruntime-linux-x86_64.so" >> $GITHUB_ENV
          mv build/libnativeruntime.so build/librobolectric-nativeruntime-linux-x86_64.so

      - name: Rename libnativeruntime for macOS
        if: runner.os == 'macOS'
        run: |
          echo "NATIVERUNTIME_ARTIFACT_FILE=librobolectric-nativeruntime-mac-$(uname -m).dylib" >> $GITHUB_ENV
          mv build/libnativeruntime.dylib build/librobolectric-nativeruntime-mac-$(uname -m).dylib

      - name: Rename libnativeruntime for Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          mv build/libnativeruntime.dll build/robolectric-nativeruntime-windows-x86_64.dll

      - name: Upload libnativeruntime (Non Windows)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.NATIVERUNTIME_ARTIFACT_FILE}}
          path: |
            build/${{env.NATIVERUNTIME_ARTIFACT_FILE}}

      - name: Upload libnativeruntime (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: robolectric-nativeruntime-windows-x86_64.dll
          path: |
            build/robolectric-nativeruntime-windows-x86_64.dll
