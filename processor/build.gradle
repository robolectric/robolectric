import org.gradle.internal.jvm.Jvm

plugins {
    alias(libs.plugins.robolectric.deployed.java.module)
    alias(libs.plugins.robolectric.java.module)
}

class GenerateSdksFileTask extends DefaultTask {
    @OutputFile
    File outFile

    @TaskAction
    void writeProperties() throws Exception {
        File outDir = outFile.parentFile
        if (!outDir.directory) outDir.mkdirs()
        outFile.withPrintWriter { out ->
            out << "# GENERATED by ${this} -- do not edit\n"

            AndroidSdk.ALL_SDKS.each { androidSdk ->
                def config = project.configurations.create("processor_sdk${androidSdk.apiLevel}")
                project.dependencies.add("processor_sdk${androidSdk.apiLevel}", androidSdk.coordinates)
                def sdkPath = config.files.first().getAbsolutePath()
                out << "${sdkPath}\n"
            }
        }
    }
}

task('generateSdksFile', type: GenerateSdksFileTask) {
    outFile = project.rootProject.layout.buildDirectory.file('sdks.txt').get().asFile
}

tasks.named("classes").configure { task ->
    task.dependsOn(generateSdksFile)
}

dependencies {
    api project(":annotations")
    api project(":shadowapi")

    compileOnly libs.findbugs.jsr305
    api libs.asm
    api libs.asm.commons
    api libs.asm.util
    api libs.guava
    api libs.gson
    implementation libs.auto.common

    def toolsJar = Jvm.current().getToolsJar()
    if (toolsJar != null) {
        implementation files(toolsJar)
    }

    testImplementation libs.javax.annotation.jsr250.api
    testImplementation libs.junit4
    testImplementation libs.mockito
    testImplementation libs.compile.testing
    testImplementation libs.truth
}
