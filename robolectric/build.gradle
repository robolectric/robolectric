import org.robolectric.gradle.DeployedRoboJavaModulePlugin
import org.robolectric.gradle.RoboJavaModulePlugin

apply plugin: RoboJavaModulePlugin
apply plugin: DeployedRoboJavaModulePlugin

processResources {
    filesMatching("**/robolectric-version.properties") {
        filter { String line ->
            return line.replaceAll(/\$\{project.version\}/, project.version)
        }
    }
}

configurations {
    shadow
}

project.sourceSets.test.compileClasspath += configurations.shadow

dependencies {
    annotationProcessor libs.google.autoService
    annotationProcessor libs.google.errorprone.core

    api project(":annotations")
    api project(":junit")
    api project(":pluginapi")
    api project(":resources")
    api project(":sandbox")
    api project(":utils")
    api project(":utils:reflector")
    api project(":plugins:maven-dependency-resolver")
    api libs.javax.inject
    compileOnly libs.google.autoService.annotations
    api libs.javax.annotation

    // We need to have shadows-framework.jar on the runtime system classpath so ServiceLoader
    //   can find its META-INF/services/org.robolectric.shadows.ShadowAdapter.
    api project(":shadows:framework")

    api libs.bouncycastle
    compileOnly libs.google.findBugs

    compileOnly AndroidSdk.MAX_SDK.coordinates
    compileOnly libs.junit
    implementation libs.androidx.test.monitor
    implementation libs.androidx.test.espresso.idling.resource

    testImplementation libs.junit
    testImplementation libs.google.truth
    testImplementation libs.google.truth.java8Extension
    testImplementation libs.mockito.core
    testImplementation libs.hamcrest
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.junit
    testImplementation libs.androidx.test.truth
    testImplementation libs.androidx.test.runner
    testImplementation(libs.google.guava)
    testCompileOnly AndroidSdk.MAX_SDK.coordinates // compile against latest Android SDK
    testRuntimeOnly AndroidSdk.MAX_SDK.coordinates // run against whatever this JDK supports
}

test {
    if (project.hasProperty('maxParallelForks'))
        maxParallelForks = project.maxParallelForks as int
    if (project.hasProperty('forkEvery'))
        forkEvery = project.forkEvery as int
}

project.apply plugin: CheckApiChangesPlugin

checkApiChanges {
    from = [
            libs.robolectric.robolectric.get(),
            libs.robolectric.annotations.get(),
            libs.robolectric.junit.get(),
            libs.robolectric.resources.get(),
            libs.robolectric.sandbox.get(),
            libs.robolectric.utils.get(),
            libs.robolectric.shadowapi.get(),
            libs.robolectric.shadowsFramework.get(),
    ]

    to = [
            project(":robolectric"),
            project(":annotations"),
            project(":junit"),
            project(":resources"),
            project(":sandbox"),
            project(":shadows:framework"),
            project(":utils"),
            project(":shadowapi"),
    ]

    entryPoints += "org.robolectric.RobolectricTestRunner"
    expectedChanges = [
            "^org.robolectric.util.ActivityController#",
            "^org.robolectric.util.ComponentController#",
            "^org.robolectric.util.ContentProviderController#",
            "^org.robolectric.util.FragmentController#",
            "^org.robolectric.util.IntentServiceController#",
            "^org.robolectric.util.ServiceController#",
    ]
}
